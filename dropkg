#!/usr/bin/env perl
# works for deb<->undeb + gets dependencies on init for control or .deb in ./
use warnings;
use strict;

use Data::Dumper;
use Cwd qw< abs_path >;
use JSON::PP;
use File::Copy;
use File::Find;
use File::Path;
use Getopt::Std;
use Term::ANSIColor;
use open qw< :encoding(UTF-8) >;

=head1 NAME

dropkg - creates debian binary (.deb) packages

=cut


# parse control file to get Package name used as final .deb filename
##todo parse all fields for additional features
##then use Version and Architecture in final string
# 
my $switch = {};
getopts('itu:d:m', $switch);
my $dropkg_base = "$ENV{HOME}/.dropkg";
my $url_base = 'https://api.metacpan.org/source';
my $control = 'control';
my $stash = '/tmp/dropkg';
my $tree = "perl -I $stash /tmp/dropkg/tree .";
my $dir = abs_path('.');


my $control_man = sub {
        my $arch;
        open my $pipe, '-|', 'uname -a';
        while(<$pipe>){
            if(/iPhone/){
                system("uiopen https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Package");
            } elsif(/Darwin/) { 
                system("open https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Package");
            } elsif(/Ubuntu/) {
                system("firefox https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Package");
            } else { print "see Debian Policy Manual at https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Package\n" }
        }
};

my $parse_control = sub {
	my $control_file = shift;	
    my $control = {};
    my @control = ();
	open( my $fh, "<", "$control_file") || die "cant open $control_file: $!";
	while(<$fh>){
		if(/\:/){
            s/(.*?)(:\ )(.*)/$1$3/;
            $control->{$1} = $3;
		}
	}
    if($control_file  =~ /^control$/){
        my $file_name = $control->{Package} . '-' . $control->{Architecture} . '-' . $control->{Version};
        return $file_name;
    } else {
        push @control, $control;
        return \@control;
    }
};

my $install = sub {
    my $deb_file_name = shift;
    my $control_installed_filename = $deb_file_name . '.control';
    my $control_install_status = move("$dir/control", "$ENV{HOME}/.dropkg/$control_installed_filename");
    print "\ncontrol install status: "; print $control_install_status . "\n";

    # install to ~/.dropkg/tmp 
    system("rm -rf $dropkg_base/tmp");
    mkpath("$dropkg_base/tmp");
    system("mv $dir/data.tar.gz $dropkg_base/tmp");
    system("cd $dropkg_base/tmp && tar -xvf $dropkg_base/tmp/data.tar.gz");
    system("rm -rf $dropkg_base/tmp/data.tar.gz");
    
    # find data file paths
    my $find_data_paths = sub {
        my $tmp_data_paths = [];
        find( sub { push @$tmp_data_paths, "$File::Find::name" if -f }, "$dropkg_base/tmp" );
        for(@$tmp_data_paths){ 
            s/(.*?\.dropkg\/tmp\/)(.*)/$2/;
            #    $_ = $install_dir . '/' . $_;
        }

        return $tmp_data_paths;
    }; 
    
    my $install_deb = sub {
        #my $data_paths = [];
        #my $tmp_data_paths = $find_data_paths->();

        mkpath("$ENV{HOME}/local");
        my $install_dir = $switch->{d} || "$ENV{HOME}/local";
        my $data_paths = $find_data_paths->();
        print "\ninstall dir: $install_dir\n";

        #for(@$tmp_data_paths){ push @$data_paths, "$install_dir/$_" }
        my $data_paths_string = ' ';
        for(@$data_paths){ $data_paths_string .= $_ . ' ' }

        system("cd $dropkg_base/tmp && tar -zcvf $install_dir/data.tar.gz $data_paths_string && cd $install_dir && tar -xvf data.tar.gz && rm -rf data.tar.gz");
        #system("rm -rf $dropkg_base/tmp");
         
        #print $_ . "\n" for @$data_paths;
        #system("mv $dropkg_base/tmp/* $install_dir/");
        return $data_paths;
    };  $install_deb->();
};


    #print $_ . "\n" for @{$find_data_paths->()};


### config
my $config = sub {
    my $mode = $_[0];
    my $config_file = "$ENV{HOME}/.dropkg/.config.json";

    my $read = sub {
        #my $config = {};
        open(my $fh,"<","$config_file") || die "cant open $config_file: $!";

        my $config = <$fh>;
        $config = decode_json $config;
        return $config
    };

    my $find = sub {
        my $deb_name = shift;
        my $dropkg = $read->();
        if($dropkg->{$deb_name}){
           return $dropkg->{$deb_name}->{data_paths};
        }
    };

    my $write = sub {
        my %config = ();
        my $dropkg = $read->();

        ( $config{name}, $config{data_paths} ) = @_;
        $config{control} = $parse_control->("$dropkg_base/$config{name}.control");
        $dropkg->{$config{name}} = \%config;
        
        open(my $fh,">",$config_file) || die "cant open $config_file";
        print $fh encode_json $dropkg;
        return \%config;
    }; 
    print "\$mode: $mode \n";
    print "\$_[1]: $_[1]\n";
    print "\$[2]: $_[2]\n";

    if( $mode eq 'write' ){ print 'added to config: ' . Dumper($write->($_[1],$_[2])) }
    if( $mode eq 'find' ){ $find->("$_[1]") }
};

my $uninstall = sub {
    my $deb_name = shift;
    #print Dumper($config->('find', $deb_name));
    my @data_files = @{$config->('find', $deb_name)};
    print @data_files;
};

##todo: quick draft, needs rewrite! 
my $unpack = sub {
    my $deb_file_name = shift;
    #print "$dir/$deb_file_name" and die;

    system("perl -I /tmp/dropkg /tmp/dropkg/ar -x $dir/$deb_file_name 2>&1");
    #system("perl -I /tmp/dropkg /tmp/dropkg/ar -x $dir/$deb_file_name &>/dev/null");
    #print "cwd befire control untar:" .  abs_path('.');
    system("tar -xf $dir/control.tar.gz");
    system("tar -xf $dir/data*");
    if( defined $switch->{i} ){ 
        $config->( 'write', $deb_file_name, $install->($deb_file_name) );
        #$config->( 'find', 'libjson-pp-p5.deb' );
#$install->($deb_file_name);
    } else {
        # cleanup
        system("rm $dir/control.tar.gz $dir/debian-binary $dir/data.* $dir/$deb_file_name");
    }

};

my $pack = sub {
    my $name = shift;
    my @shell = ();

    # array ref to hold inline DATA at the tail
    while(<DATA>){ push @shell, $_ }
    my $shell = \@shell;;

    # add .deb
    unless( $name =~/\.deb/){ $name .= '.deb' };
    
    ##todo: get rid of curl, use HTTP::Tiny (CORE since 5.13.9) fallback on curl/wget if (< 5.13.9)
    my $shoot = sub {
        my $packer = system(shift);
        $packer = system("rm -rf $dir/*") unless $packer;
        $packer = move("$dir/../debian.deb", "$name");
        $packer = unlink "$dir/../debian-binary", "$dir/../data.tar.gz", "$dir/../control.tar.gz"; 
        #$packer = rmdir("$dir/../DEBIAN");
    };
    $shoot->($shell->[1]);
};

# get perl dependencies  on first run; tar & Filesys::Tree not necessary but tree is quite usefull for this stuff + it's not on iOS; geting tar makes it all pure-perl therefore might work on win.. 
my $init = sub {
    my $libs = [];

#quick draft, needs proper handling when using -i switch for custom install to keep track of installation paths etc; kind of what dpkg does with control files/.list 
    unless( -d "$dropkg_base" ){
        system("mkdir $dropkg_base");
    }

    unless( -f "$dropkg_base/.config.json" ){
        open(my $fh,">","$dropkg_base/.config.json");
        print $fh '[{}]';
    }
    #todo: URL should go to DATA and curl replaced with HTTP::Tiny
    unless( -d "$stash/Filesys" ){
        system("mkdir -p $stash/Filesys");
        print "\nUsing curl to get dependencies\n $stash <<<getopts.pl ";
        system("curl -#kL $url_base/ZEFRAM/Perl4-CoreLibs-0.003/lib/getopts.pl > $stash/getopts.pl");
        print " $stash <<<ar";
        system("curl -#kL $url_base/BDFOY/PerlPowerTools-1.007/bin/ar > $stash/ar");

        print " $stash <<<tree";
        system("curl -#kL $url_base/COG/Filesys-Tree-0.02/lib/Filesys/Tree.pm > $stash/Filesys/Tree.pm");
        system("curl -#kL $url_base/COG/Filesys-Tree-0.02/tree > $stash/tree");
        print "   tree|ar>>>$stash/dropkg->" . colored(['green'],"ok") . "\n\n";
    }
    find( sub { push @$libs, $File::Find::name if (-f $_) }, $stash ); 
    return $libs;
};

my $control_help = sub {
    my $shell = [];
    my $control = {};
    my @control_template = ();
    my @control_example = ();
    
    # if there is ~/dropkg-control use it as template, else use DATA section
    if( ! -f "$ENV{HOME}/dropkg-control" ){
        while(<DATA>){ push @$shell, $_ }
        {
            $_ = $shell->[0];
            @control_template = /\S+/g;
        }
    } else {
        open(my $fh,"<", "$ENV{HOME}/dropkg-control") || die "cant open $ENV{HOME}/dropkg-control: $!";
        while(<$fh>){
            chomp;
            push @control_template, $_;
        }
    }
     
    for( @control_template ){ $_ = $_ . "\n" }
    $control->{control_template} = \@control_template;
    return $control;
};

my $start = sub {
    my $path = shift;
    $init->();
    #my( $control_install ) = ();
    my $file = [];
    
    #print "path: $path";

    ### control template
    if( $dir eq "$ENV{HOME}" ){ print " you are in \$HOME directory, create subdirectory to continue\n" and return }
    if( defined $switch->{m} ){ 
        return $control_man->();
    } elsif ( defined $switch->{t} ){ 
        my $control_help = $control_help->();
        print @{$control_help->{control_template}} and return;
    } elsif ( defined $switch->{u} ) {
        print Dumper($uninstall->($switch->{u})) and return;
    } else {

    find( { wanted => sub { push @$file, $_ }}, $dir);

    for(@$file){
            # if we see 'control' here (.) -> making package
            if( $_ eq 'control' ){
                #print "\nfound: $_\n";
                my $deb = $ARGV[0] || $parse_control->($control);
                #print "\npack: "; 
                print $pack->($deb);
                system("$tree");
            # if we see '*.deb' here (.) -> unpacking package
            } elsif(/.*\.deb$/){
                #print "\nfound $_\n";
# unpack needs to chec$k if we're installing or just unpacking, if there is -i switch from user -> doing custom install and data pack needs to be unpacked into $HOME (default) directory
                #print "\nunpack "; 
                $unpack->($_);
                system("$tree");
            } 
    }
}
};

#print 'init-> ';  for( @{$init->()} ){ print $_ . '   '}; print "\n\n";
#print 'mode-> ';  for( @{$start->($dir)} ){ print $_ . '   '}; print "\n";

$start->();

=head1 INSTALLATION

If you are on iOS:

you can use dropkg.deb in deb/ios folder and install as root with C<dpkg -i dropkg.deb> or add source http://load.sh/cydia/ into Cydia and search for 'dropkg'


If you are on Linux/OSX:

# Install

C<git clone http://github.com/z448/dropkg>

C<cd dropkg>

# setup

C<source ./env.sh>

=cut

=head1 SYNOPSIS

Creates debian .deb packages, uses perl implementation of 'ar' archiver and Filesys::Tree module. Both are downloaded and set up on first run, you need to have 'curl' installed. Without any option, dropkg creates .deb package if there is control file in current directory. Name of .deb file is taked from control file, Name + Architecture + Version + .deb. If there is .deb file in current directory it will unpack contents of package into original tree. Because these two functions (pack/unpack .deb) doesnt require any options, it's possible to place it on server and using curl (or wget) pipe into perl interpreter in terminal. 

Dropkg supports mandatory control file and two optional debian files: prerm and postinst

Example: C<curl website.com/dropkg | perl>

- this will pack everything in current directory into .deb file if there is control file in current directory
- or if there is .deb file in current directory it'll unpack it into original tree

=cut

=head1 EXAMPLES


Create .deb package:

- place your files into directory along with prepared control file then C<cd directory>

C<dropkg>

- name of .deb file is taked from control file, Name + Architecture + Version + .deb

- to have different .deb filename pass it as 1st parameter C<dropkg myapp.deb> creates myapp.deb package. 

Unpack .deb package

- go into directory that contains .deb package

C<dropkg>

Print control template

C<dropkg -t>

Open Debian Policy Manual in browser 

C<dropkg -m>

To use your own control template, with prefilled values ( Architecture, Homepage etc. ) save is as 'dropkg-control' into your home directory. C<dropkg -t> option will then print your control template instead of empty one



=cut


__DATA__
Name: Version: Author: Architecture: Package: Section: Maintainer: Homepage: Description: Depends:
rm -rf DEBIAN && mv control .control && if [ -f postinst ]; then mv postinst .postinst; fi; if [ -f prerm ]; then mv prerm .prerm;fi; tar czf ../data.tar.gz *;mkdir DEBIAN && cd DEBIAN && mv ../.control control; if [ -f ../.postinst ]; then mv ../.postinst postinst; fi;  if [ -f ../.prerm ]; then mv ../.prerm prerm; fi; tar czf ../../control.tar.gz *;cd ../..; echo '2.0' > debian-binary && perl -I/tmp/dropkg /tmp/dropkg/ar r debian.deb debian-binary control.tar.gz data.tar.gz
perl /tmp/dropkg/ar -x *.deb
