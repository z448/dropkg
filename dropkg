#!/usr/bin/env perl

use strict;
use warnings;
use File::Copy;
use File::Find;
use File::Path qw( make_path remove_tree);
use Getopt::Std;
use Cwd;
use Time::HiRes qw( usleep );
use Digest::MD5 qw( md5_hex );
use autodie;

our $VERSION = "v2.0.16";

delete @ENV{ qw( IFS CDPATH ENV BASH_ENV ) };

my %opt;
getopts('stvmhc:', \%opt);


sub debian_manual{
    if( dep('open') ){
        system("open 'https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Package'");
    } else { print "see Debian Policy Manual at https://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Package\n" }
}


my %dropkg = ( animation => 1, compression => 'gzip', md5sums_file => 0 );
sub conf{
    if( -f "$ENV{HOME}/.dropkg" ){
        open my $conf, '<', "$ENV{HOME}/.dropkg";
        while(<$conf>){
            chomp;
            next if /(#|^$)/;
            next unless /:/;
            my( $field, $value ) = split /:\s*/, $_;
            $dropkg{$field} = $value if $field =~ /^(animation|compression|md5sums_file)$/;
	    }
        close $conf;
    }
    else {
        open my $conf, '>', "$ENV{HOME}/.dropkg";
        print $conf "animation: $dropkg{animation}\n\n";
        print $conf "# if md5sums file should be generated before packege is created\nmd5sums_file: $dropkg{md5sums_file}\n\n"; 
        print $conf "# recognized options for data archive compression are: gzip, bzip2, lzma, xz, zstd\ncompression: $dropkg{compression}\n\n"; 
        close $conf;
    }
    $dropkg{compression} = $opt{c} if $opt{c};
    $dropkg{compression_ext} = $dropkg{compression};
    $dropkg{compression_ext} =~ s/gzip/gz/;
    $dropkg{compression_ext} =~ s/bzip2/bz2/;
    $dropkg{compression_ext} =~ s/zstd/zst/;

    $dropkg{md5sums_file} = 1 if $opt{s};
}


sub dep{
    my $dep = shift;
    
    if($dep eq 'ar'){
        my $module = eval {
            require Archive::Ar;
            Archive::Ar->import();
            1;
        };
        return 'module' if $module;
    }
    

    my $bin;
    open( my $whichph, "-|", 'which', $dep );
    while(<$whichph>){
        chomp;
        $bin = $_;
    }
    return unless $bin;

    open( my $fileph, "-|", 'file', $bin );
    while(<$fileph>){
        chomp;
        $bin = "perl $bin" if /Perl/;
    }

    return $bin;
}

my $ar = dep('ar');
my $tree = dep('tree');
unless( $ar ){ print "'ar' dependency is missing. You can use cpan to install it (cpan Archive::Ar).\n" and exit }
unless( $tree ){ print "'tree' dependency is missing. You can use cpan to install it (cpan Filesys::Tree).\n" and exit }

my %control;
if( -f "$ENV{HOME}/dropkg_control" ){
    open my $fh, "<", "$ENV{HOME}/dropkg_control";
    while(<$fh>){
        chomp;
        my( $field, $value ) = split /:\s+/, $_;
        $control{$field} = $value;
    }
} else {
            %control = ( Author => '(optional)',
                        Version => '(mandatory)',
                        Name    => '(optional)',
                        Package => '(mandatory)',
                        Source  => '(optional)',
                        Section => '(recomended)',
                        Priority => '(recomended)',
                        Architecture => '(mandatory)',
                        Esential    => '(optional)',
                        Depends => '(mandatory if package has dependencies)',
                        'Installed-Size'  => '(optional)',
                        Maintainer  => '(mandatory)',
                        Description => '(mandatory)',
                        Homepage    => '(optional)',
                        Suggests    => '(optional)',
                        Recommends   => '(optional)',
                        ' '    => 'Place for extended description (optional), start this line with empty space as this sentence.'
            );
}

sub start{
    my %seen = ( control => 0, deb => 0 );
    my @deb;

    opendir( my $dh, '.' );
    for( readdir $dh ){
	if( /^control$/ ){
            $seen{control}++;
        }

        if( /(.*\.deb)$/ ){
            $seen{deb}++;
            push @deb, $1;
        }
    }
    closedir $dh;

    if( $seen{control} > 0 and $seen{deb} > 0 ){ print "there are control and .deb files in current directory\n" and exit } 
    if( $seen{deb} > 1 ){
        if( $ARGV[0] ){
            unpackdeb($ARGV[0]);
        } else {
            print "there is more than one one .deb file in current directory, choose one:\n";
            opendir(my $dh, '.');
            my @deb = grep{/\.deb$/}readdir($dh);
            print "$_\n" for @deb;
            exit;
        }
    }
    if( $seen{control} == 0 and $seen{deb} == 0 ){ print "there is no control or .deb file in current directory\n" and  exit }
    if( $seen{control} == 1 and $seen{deb} == 0 ){
        my %control_file;
	    my $ed_line = 0;
        open my $rfh, '<', './control';
        while(<$rfh>){
            chomp;
	        if(/(^\s+)(.*)/){
		        $ed_line++;
		        $control_file{$ed_line} = $2;
	        } else {
                my( $field, $value ) = split /:\s+/, $_;
		        $control_file{$field} = $value;
	        }   
        }
        close $rfh;

        for( keys %control ){
            delete $control{$_} unless ( $control{$_} eq '(mandatory)' );
        }

        my @missing;
        for( keys %control ){
            push( @missing, $_ ) unless $control_file{$_};
        }

        if( @missing ){
            print "control file is missing mandatory fields: "; print "$_, " for @missing; print "\n";
            exit;
        }

	    $control_file{'Installed-Size'} = installed_size();

    open my $wfh,'>', 'control';
    for(keys %control_file){
        unless(/\d+|Description/){ print $wfh "$_: $control_file{$_}\n" if exists $control_file{$_} }
    }
	print $wfh "Description: $control_file{'Description'}\n" if exists $control_file{'Description'};
    for(1..$ed_line){ print $wfh " $control_file{$_}\n" if exists $control_file{$_} };
    close $wfh;
        
        packdir( debname() );
    }
    if( $seen{control} == 0 and $seen{deb} == 1 ){ unpackdeb($deb[0]) }
}


sub dropkg{
    my $term_height = 0;
    open my $tput_lines, '-|', 'tput', 'lines';
    while(<$tput_lines>){
        chomp( $term_height = $_ );
    }
    close $tput_lines;
    system('clear');
    my $ps1 = $ENV{PS1};
    $ENV{PS1} = ' ';

    my $usleep = 130000;
    for( 0..16 ){
        $usleep = $usleep - 8000;
        if( $usleep < 8000 ){ $usleep = 8000 }
	    print "\n";
        usleep( $usleep );
    }

    $ENV{PS1} = $ps1;
}

sub installed_size{
    my $size = 0;
    find{ untaint => 1, wanted => sub { if( -f $_){ $size += -s } } }, ('.');
    $size;
}

sub debname{
    my %control_file;
    open my $fh, '<', 'control';
    while(<$fh>){
        chomp;
        my( $field, $value ) = split /:\s/, $_;
        $control_file{$field} = $value;
    }
    my $debname = $ARGV[0] ? $ARGV[0] : "$control_file{Package}_$control_file{Version}_$control_file{Architecture}.deb";
}


sub packdir{
    my $debname = shift;
    if( $ENV{PWD} eq $ENV{HOME} ){ print "You are in your home directory, create new directory and place your files in it\n" and exit }
    if( $ENV{PWD} eq '/' ){ print "You are in root directory, create new directory and place your files in it\n" and exit }

    remove_tree('DEBIAN');
    unlink './debian-binary' if -f './debian-binary';

    my @data = ();
    opendir(my $dh, '.') || die "Can't open directory: $!";
    while( readdir $dh ){
        unless( /^\.$|^\.\.$|^control$|^preinst$|^postinst$|^prerm$|^postrm$|^conffiles$|^shlibs$|^triggers$|^md5sums$/ ) { push @data, $_ }
    }
    closedir $dh;

    my @data_file = ();
    find{ untaint => 1, wanted => sub{
        unless( /^\.$|^\.\.$|^control$|^preinst$|^postinst$|^prerm$|^postrm$|^conffiles$|^shlibs$|^triggers$|^md5sums$/ ) {
            push(@data_file, "$File::Find::dir/$_") if -f;
        }
    } }, ('.');
    if( $dropkg{md5sums_file} ){
        for my $file( @data_file ){
            open( my $rfh, '<', "$file") || die "Can't open file $file: $!";
            my $md5 = Digest::MD5->new->addfile($rfh)->hexdigest;
            close $rfh;

            open( my $wfh, '>>', './md5sums') || die "Can't open file ./md5sums: $!";
            $file =~ s/^\.\///;
            print $wfh "$md5  $file\n";
            close $wfh;
        }
    }

    die "dropkg: unsupported compression $dropkg{compression}\n" unless $dropkg{compression} =~ /^(gzip|bzip2|lzma|xz|zstd)$/;
    die "dropkg: can't compress with $dropkg{compression}, $dropkg{compression} not installed\n" unless dep($dropkg{compression});

	system("tar -cf - @data | $dropkg{compression} -9 -c - > data.tar.$dropkg{compression_ext}");

    make_path('DEBIAN');
    chdir 'DEBIAN';
    
    copy('../control', 'control') and unlink '../control';
    if( -f '../md5sums'){ copy('../md5sums', 'md5sums') and unlink '../md5sums' }
    if( -f '../preinst'){ copy('../preinst', 'preinst') and unlink '../preinst' }
    if( -f '../postinst'){ copy('../postinst', 'postinst') and unlink '../postinst' }
    if( -f '../prerm'){ copy('../prerm', 'prerm') and unlink '../prerm' }
    if( -f '../postrm'){ copy('../postrm', 'postrm') and unlink '../postrm' }
    if( -f '../conffiles'){ copy('../conffiles', 'conffiles') and unlink '../conffiles' }
    if( -f '../shlibs'){ copy('../shlibs', 'shlibs') and unlink '../shlibs' }
    if( -f '../triggers'){ copy('../triggers', 'triggers') and unlink '../triggers' }

    my @control = ();
    find{ untaint => 1, wanted => sub{
	    if( -f ){ push @control, "$File::Find::dir/$_" }
    } }, ('.');

    system("tar -czf ../control.tar.gz @control");
    
    open my $fh, '>', '../debian-binary';
    print $fh "2.0\n";
    close $fh;

    chdir '..';
    for( <*> ){
        next if(/^debian-binary$|^data\.tar|^control\.tar/);
        remove_tree $_ if -d $_;
        unlink $_ if -f $_;
    }

    open SAVEERR, ">& STDERR";
    open SAVEOUT, ">& STDOUT";
    open STDOUT, ">", undef;;
    open STDERR, ">& STDOUT";
    select STDERR; $| = 1;
    select STDOUT; $| = 1;

    if( $ar eq 'module'){
        my $archive = Archive::Ar->new;
        $archive->add_files( './debian-binary', './control.tar.gz', "./data.tar.$dropkg{compression_ext}" );
        $archive->write( $debname );
    } else { system("$ar -r $debname debian-binary control.tar.gz data.tar.$dropkg{compression_ext}") }

    close STDOUT;
    close STDERR;
    open STDOUT, ">&SAVEOUT";
    open STDERR, ">&SAVEERR";

    unlink('./debian-binary', './control.tar.gz', "./data.tar.$dropkg{compression_ext}");

    dropkg() if( $dropkg{animation} == 1 );
    open my $lsp, '-|', 'ls';
    while(<$lsp>){ print }
    close $lsp;
}

sub unpackdeb {
    my $deb = shift;
    unless( -f $deb ){ print "File $deb is not in current directory.\n" }

    if( $ar eq 'module'){
        my $archive = Archive::Ar->new;
        $archive->read( "./$deb" );
        $archive->extract;
    } else { system( "$ar -x $deb") }

    unlink './debian-binary';

    my @tar_file = ();
    for(<*>){
	    if( /^control\.tar|^data\.tar/){ push @tar_file, $_ }
    }

    my $imposible = 0;
    for my $file( @tar_file ){
        if( $file =~ /.+\.(.+)/){
            my $compression = $1;
            $compression =~ s/gz/gzip/;
            $compression =~ s/bz2/bzip2/;
            $compression =~ s/zst/zstd/;
            unless( dep($compression) ){
                print "dropkg: can't extract $file, $compression not installed\n";
                $imposible = 1;
            }
        } 
    }
    unlink @tar_file and exit if $imposible;

    unlink $deb;

    open SAVEERR, ">& STDERR";
    open SAVEOUT, ">& STDOUT";
    open STDOUT, ">", undef;;
    open STDERR, ">& STDOUT";
    select STDERR; $| = 1;
    select STDOUT; $| = 1;

    system("tar -xvf $tar_file[0]");
    system("tar -xvf $tar_file[1]");

    close STDOUT;
    close STDERR;
    open STDOUT, ">&SAVEOUT";
    open STDERR, ">&SAVEERR";

    unlink @tar_file;


    open( my $treeph, '-|', $tree);
    while(<$treeph>){ print }
    close $treeph;
}

sub help {
	print "Usage:\tWithout any option dropkg creates .deb package if there is a 'control' file in current directory. If there is a '.deb' package in current directory it will extract it.\n\n";
	print "\t" . "-v  show version\n";
	print "\t" . "-c  set compression for data archive: gzip, bzip2, lzma, xz, zstd\n";
	print "\t" . "-s  generate md5sums file and include it in package\n";
	print "\t" . "-t  show control file template\n";
	print "\t" . "-m  show debian policy manual\n\n";
	print "To read more use 'perldoc dropkg'\n\n";
}


if( $opt{t} ){
    for( keys %control ){ print "$_: $control{$_}\n" unless /^\s+|Description/ }
    print "Description: $control{Description}\n";
    print " $control{' '}\n";
} elsif( $opt{m} ){
    debian_manual();
} elsif( $opt{h} ){
    help();
} elsif( $opt{v} ){
    print "$VERSION\n";
} else {
    conf();
    start();
}


=encoding utf8

=head1 NAME

dropkg - creates debian binary packages

=head1 VERSION

This document describes dropkg version 2.0.16

=head1 SYNOPSIS

=over 4

=item If there is a control file in current directory dropkg will create debian binary package with contents of current directory. If there is a debian package in current directory dropkg will extract its contents into current directory.

=over 4

=item C<-v> show version

=item C<-c> set compression for data archive: gzip, bzip2, lzma, xz, zstd

=item C<-s> generate md5sums file and include it in package

=item C<-t> show control file template  

=item C<-m> show debian policy manual 

=item C<-h> show help

=back

=back

=head1 EXAMPLES

=over 4

=item Creating .deb package:

=over 4

=item - You have program 'myprg' that is using config file 'myprg.conf'. To create .deb package that will install program into '/usr/bin' directory and place config file into '/etc' directory create 'usr/bin' and 'etc' paths in current directory and move there program and config file.

=back

=begin text

            $ pwd
            ~/myTmp

            $ ls
            myprg   myprg.conf

            $ mkdir -p usr/bin
            $ mv myprg usr/bin/
            $ mkdir etc
            $ mv myprg.conf etc/



=end text

=over 4

=item - Create 'control' file. To see control file template use C<-t> option.

=back

=begin text

            $ dropkg -t | grep mandatory > control

            $ cat control
            Maintainer: (mandatory)
            Package: (mandatory)
            Version: (mandatory)
            Architecture: (mandatory)
            Depends: (mandatory if package has dependencies)
            Description: (mandatory)



=end text

=over 4

=item - Fill in mandatory parts of control file with editor and use dropkg without any option to create .deb package.

=back

=begin text

            $ ls
            control  etc  usr

            $ cat control
            Package: myprg
            Version: 1.0
            Architecture: iphoneos-arm
            Depends: perl
            Maintainer: zdenek <zdenek@cpan.org>
            Description: my test program

            $ tree
            .
            ├── control
            ├── etc
            │   └── myprg.conf
            └── usr
                └── bin
                    └── myprg

            $ dropkg
            myprg_1.0_iphoneos-arm.deb
                        
=end text

=over 4

=item - dropkg is using control file to create name for .deb package, Package_Version_Architecture.deb. To have different .deb filename pass it as first parameter C<dropkg filename.deb>.

=item - by default gzip compression is used for data unless '~/.dropkg' config contains different compression option. Compression can be also set by C<-c> switch.  

=back

=item Extracting .deb package:

=over 4

=item - Go into directory that contains .deb package and run C<dropkg> without any option. If there is more than one .deb file in current directory pass filename as first parameter C<dropkg filename.deb>.

=back

=begin text

            $ ls
            myprg_1.0_iphoneos-arm.deb

            $ dropkg
            .
            ├── control
            ├── etc
            │   └── myprg.conf
            └── usr
                └── bin
                        └── myprg

            $ ls
            control  etc  usr



=end text

=back

=head1 DEVELOPMENT

dropkg is hosted on L<github|https://github.com/z448/dropkg>. You can track and contribute to its development there.

=head1 AUTHOR

Zdeněk Bohuněk, C<< <zdenek@cpan.org> >>

=head1 COPYRIGHT

Copyright © 2016-2023, Zdeněk Bohuněk C<< <zdenek@cpan.org> >>. All rights reserved.

This code is available under the Artistic License 2.0.

=cut
